name: Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*' # Run workflow on version tags, e.g. v1.0.0.

jobs:
  release:
    runs-on: ubuntu-latest
    #env:
      # usage of GRAFANA_API_KEY is deprecated
      # GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }}
      # GRAFANA_ACCESS_POLICY_TOKEN: ${{ secrets.GRAFANA_ACCESS_POLICY_TOKEN }}
    steps:
      - run: echo ${GITHUB_WORKSPACE}
      - uses: actions/checkout@v3

      - name: Copy grafana.ini to /etc/grafana
        run: |
            sudo cp /home/runner/work/Grafana.Plugin.CostManagement/Grafana.Plugin.CostManagement/grafana-files/grafana.ini /etc/grafana/
            ls -l /etc/grafana/
            cat /etc/grafana/grafana.ini
        shell: bash

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20.9.0'
          cache: 'npm'
          cache-dependency-path: /home/runner/work/Grafana.Plugin.CostManagement/Grafana.Plugin.CostManagement/dfe-azurecostbackend-datasource/


      - name: Setup Go environment
        uses: actions/setup-go@v4
        with:
          go-version: '^1.21.4'
          check-latest: true
      - run: go version

      - name: Install dependencies
        run: |
          cd /home/runner/work/Grafana.Plugin.CostManagement/Grafana.Plugin.CostManagement/dfe-azurecostbackend-datasource
          npm install
          npm ci
          npm run typecheck
          npm run lint
          npm run test:ci
          npm run build
        shell: bash
      
      - name: Build and test frontend
        run: |
          cd /home/runner/work/Grafana.Plugin.CostManagement/Grafana.Plugin.CostManagement/dfe-azurecostbackend-datasource
          npm run build

      - name: Install jq
        run: sudo apt-get install jq
  
      - name: Read existing plugin.json and add alerting is true
        run: |
            file_path="/home/runner/work/Grafana.Plugin.CostManagement/Grafana.Plugin.CostManagement/dfe-azurecostbackend-datasource/dist/plugin.json"
            existing_json=$(cat "$file_path")
            echo "Existing JSON:"
            echo "$existing_json"
            new_json=$(echo "$existing_json" | jq '. + { "alerting": true }')
            echo "Modified JSON:"
            echo "$new_json"
            echo "$new_json" > "$file_path"
  
      - name: Display modified JSON
        run: |
          file_path="/home/runner/work/Grafana.Plugin.CostManagement/Grafana.Plugin.CostManagement/dfe-azurecostbackend-datasource/dist/plugin.json"
          cat "$file_path"

      - name: Check for backend
        id: check-for-backend
        run: |
          if [ -f "/home/runner/work/Grafana.Plugin.CostManagement/Grafana.Plugin.CostManagement/dfe-azurecostbackend-datasource/Magefile.go" ]; then
            echo "has-backend=true" >> $GITHUB_OUTPUT
          fi

      - name: Install Mage
        run: |
          git clone https://github.com/magefile/mage
          cd mage
          go run bootstrap.go
  
      - name: Build backend
        if: steps.check-for-backend.outputs.has-backend == 'true'
        run: |
            mage -v build:linux
        working-directory: ${{ github.workspace }}/dfe-azurecostbackend-datasource

      - name: Run Go unit tests
        if: steps.check-for-backend.outputs.has-backend == 'true'
        run: |
          cd /home/runner/work/Grafana.Plugin.CostManagement/Grafana.Plugin.CostManagement/dfe-azurecostbackend-datasource
          go test /home/runner/work/Grafana.Plugin.CostManagement/Grafana.Plugin.CostManagement/dfe-azurecostbackend-datasource/pkg/plugin
 
      - name: Check Token and Show Message
        run: |
          if [ -z "${{ secrets.GRAFANA_ACCESS_POLICY_TOKEN }}" ]; then
            echo "Error: GRAFANA_ACCESS_POLICY_TOKEN is empty. Please set the secret in GitHub. Please generate a Grafana access policy token: https://grafana.com/developers/plugin-tools/publish-a-plugin/sign-a-plugin#generate-an-access-policy-token"
            exit 1
          else
            echo "GRAFANA_ACCESS_POLICY_TOKEN is set: ${{ secrets.GRAFANA_ACCESS_POLICY_TOKEN }}"
          fi

      - name: Sign plugin
        run: |
          cd /home/runner/work/Grafana.Plugin.CostManagement/Grafana.Plugin.CostManagement/dfe-azurecostbackend-datasource
          export GRAFANA_ACCESS_POLICY_TOKEN="${{ secrets.GRAFANA_ACCESS_POLICY_TOKEN }}"
          npx @grafana/sign-plugin@latest --rootUrls http://localhost:3000/,http://20.107.65.156.nip.io:3000/grafana,http://dev.develop-child-family-social-work-career.education.gov.uk:3000/grafana,http://test.develop-child-family-social-work-career.education.gov.uk:3000/grafana,http://pre-prod.develop-child-family-social-work-career.education.gov.uk:3000/grafana,http://develop-child-family-social-work-career.education.gov.uk:3000/grafana,http://www.dev.develop-child-family-social-work-career.education.gov.uk:3000/grafana,http://www.test.develop-child-family-social-work-career.education.gov.uk:3000/grafana,http://www.pre-prod.develop-child-family-social-work-career.education.gov.uk:3000/grafana,http://www.develop-child-family-social-work-career.education.gov.uk:3000/grafana
        # if: ${{ secrets.GRAFANA_ACCESS_POLICY_TOKEN != '' }}

      - name: Get plugin metadata
        id: metadata
        run: |
          sudo apt-get install jq

          cd /home/runner/work/Grafana.Plugin.CostManagement/Grafana.Plugin.CostManagement/dfe-azurecostbackend-datasource

          export GRAFANA_PLUGIN_ID=$(cat dist/plugin.json | jq -r .id)
          export GRAFANA_PLUGIN_VERSION=$(cat dist/plugin.json | jq -r .info.version)
          export GRAFANA_PLUGIN_TYPE=$(cat dist/plugin.json | jq -r .type)
          export GRAFANA_PLUGIN_ARTIFACT=${GRAFANA_PLUGIN_ID}-${GRAFANA_PLUGIN_VERSION}.zip
          export GRAFANA_PLUGIN_ARTIFACT_CHECKSUM=${GRAFANA_PLUGIN_ARTIFACT}.md5

          echo "plugin-id=${GRAFANA_PLUGIN_ID}" >> $GITHUB_OUTPUT
          echo "plugin-version=${GRAFANA_PLUGIN_VERSION}" >> $GITHUB_OUTPUT
          echo "plugin-type=${GRAFANA_PLUGIN_TYPE}" >> $GITHUB_OUTPUT
          echo "archive=${GRAFANA_PLUGIN_ARTIFACT}" >> $GITHUB_OUTPUT
          echo "archive-checksum=${GRAFANA_PLUGIN_ARTIFACT_CHECKSUM}" >> $GITHUB_OUTPUT

          echo "github-tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

          echo "GRAFANA_PLUGIN_ID: $GRAFANA_PLUGIN_ID"
          echo "GRAFANA_PLUGIN_VERSION: $GRAFANA_PLUGIN_VERSION"
          echo "GRAFANA_PLUGIN_TYPE: $GRAFANA_PLUGIN_TYPE"
          echo "GRAFANA_PLUGIN_ARTIFACT: $GRAFANA_PLUGIN_ARTIFACT"
          echo "GRAFANA_PLUGIN_ARTIFACT_CHECKSUM: $GRAFANA_PLUGIN_ARTIFACT_CHECKSUM"
          echo "github-tag: ${GITHUB_REF#refs/*/}"
          echo "::set-output name=GRAFANA_PLUGIN_ID::$GRAFANA_PLUGIN_ID"
          echo "::set-output name=GRAFANA_PLUGIN_VERSION::$GRAFANA_PLUGIN_VERSION"
          echo "::set-output name=GRAFANA_PLUGIN_TYPE::$GRAFANA_PLUGIN_TYPE"
          echo "::set-output name=GRAFANA_PLUGIN_ARTIFACT::$GRAFANA_PLUGIN_ARTIFACT"
          echo "::set-output name=GRAFANA_PLUGIN_ARTIFACT_CHECKSUM::$GRAFANA_PLUGIN_ARTIFACT_CHECKSUM"
          echo "::set-output name=github-tag::${GITHUB_REF#refs/*/}"

      # - name: Read changelog
      #   id: changelog
      #   run: |
      #     awk '/^## / {s++} s == 1 {print}' CHANGELOG.md > release_notes.md
      #     echo "path=release_notes.md" >> $GITHUB_OUTPUT

      - name: Check package version
        run: |
          cd /home/runner/work/Grafana.Plugin.CostManagement/Grafana.Plugin.CostManagement/dfe-azurecostbackend-datasource
          PLUGIN_VERSION="${{ steps.metadata.outputs.plugin-version }}"
          GITHUB_TAG="${{ steps.metadata.outputs.github-tag }}"
          echo "Plugin version: $PLUGIN_VERSION"
          echo "GitHub tag: $GITHUB_TAG"
          
        # if [ "v${{ steps.metadata.outputs.github-tag }}" != "vmain" ]; then printf "\033[0;31mPlugin version doesn't match tag name\033[0m\n"; exit 1; fi

        # if [ "v${{ steps.metadata.outputs.plugin-version }}" != "${{ steps.metadata.outputs.github-tag }}" ]; then printf "\033[0;31mPlugin version doesn't match tag name\033[0m\n"; exit 1; fi

      - name: Package plugin
        id: package-plugin
        run: |
          cd /home/runner/work/Grafana.Plugin.CostManagement/Grafana.Plugin.CostManagement/dfe-azurecostbackend-datasource
          mv dist ${{ steps.metadata.outputs.plugin-id }}
          zip ${{ steps.metadata.outputs.archive }} ${{ steps.metadata.outputs.plugin-id }} -r
          md5sum ${{ steps.metadata.outputs.archive }} > ${{ steps.metadata.outputs.archive-checksum }}
          echo "checksum=$(cat ./${{ steps.metadata.outputs.archive-checksum }} | cut -d' ' -f1)" >> $GITHUB_OUTPUT
          ls

      - name: Validate plugin
        run: |
          git clone https://github.com/grafana/plugin-validator
          pushd ./plugin-validator/pkg/cmd/plugincheck2
          go install
          popd
          pwd
          plugincheck2 -config ./plugin-validator/config/default.yaml  /home/runner/work/Grafana.Plugin.CostManagement/Grafana.Plugin.CostManagement/dfe-azurecostbackend-datasource/${{ steps.metadata.outputs.archive }}
          # Copy the zip file to the releases folder in github.workspace
          cd /home/runner/work/Grafana.Plugin.CostManagement/Grafana.Plugin.CostManagement/dfe-azurecostbackend-datasource
          mkdir -p ${{ github.workspace }}/releases
          mv -f ./${{ steps.metadata.outputs.archive }} ${{ github.workspace }}/releases/
          mv -f ./${{ steps.metadata.outputs.archive-checksum }} ${{ github.workspace }}/releases/
          cd ${{ github.workspace }}/releases/
          ls

      - name: Create GitHub Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.workspace }}/releases/${{ steps.metadata.outputs.archive }}
          asset_name: "${{ steps.metadata.outputs.archive }}"
          tag: ${{ github.ref }}
          overwrite: true
          body: "Grafann Cost Plugin"
        
